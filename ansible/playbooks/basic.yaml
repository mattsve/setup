- hosts: all
  become: true
  tasks:
    - name: proxmox agent
      when: proxmox_agent is defined and
        proxmox_agent
      block:
        - name: install package
          package:
            name: qemu-guest-agent
            state: present
        - name: Enable service
          systemd:
            name: qemu-guest-agent
            state: started
            enabled: true

    - name: Add mattias user
      ansible.builtin.user:
        name: mattias
        comment: Mattias Svensson
      register: mattias_user_registered
    - name: Set authorized_keys for mattias user
      ansible.posix.authorized_key:
        user: mattias
        state: present
        key: "{{ item }}"
      with_file:
        - public_keys/hex.pub
        - public_keys/necronomicon.pub
    - name: mattias user sudo no pwd
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/nopassword
        line: mattias ALL=(ALL) NOPASSWD:ALL
        create: true
        owner: root
        mode: 0644
        state: present
    - name: install acl
      package:
        name: acl
    - name: Checkout dotfiles
      when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
      ansible.builtin.git:
        repo: "https://github.com/mattsve/dotfiles.git"
        dest: "{{ mattias_user_registered.home }}/.dotfiles"
      become_user: mattias

    - name: install pip3
      package:
        name:
          - python3-pip
          - python3-dev

    - name: Add powershell
      when: ansible_distribution == 'Ubuntu' and
        ansible_architecture == 'x86_64'
      block:
        - name: install packages
          package:
            name:
              - apt-transport-https
              - software-properties-common
        - name: Install microsoft packages
          apt:
            deb: https://packages.microsoft.com/config/ubuntu/{{ ansible_distribution_version }}/packages-microsoft-prod.deb
        - name: Add repository
          ansible.builtin.command: add-apt-repository universe
          changed_when: false
        - name: Apt update
          ansible.builtin.command: apt update
          changed_when: false
        - name: Install powershell
          package:
            name:
              - powershell
        - name: run bootstrap.ps1
          command:
            cmd: pwsh -NoProfile -NonInteractive -File "{{ mattias_user_registered.home }}/.dotfiles/bootstrap.ps1"
            chdir: "{{ mattias_user_registered.home }}/.dotfiles"
            creates: "{{ mattias_user_registered.home }}/.poshthemes"
          become_user: mattias
        - name: set shell
          user:
            name: mattias
            shell: /usr/bin/pwsh
        - name: install thefuck
          pip:
            name: thefuck

    - name: install mosh
      package:
        name: mosh
        state: present

    - name: install 1password cli
      when: ansible_distribution == 'Ubuntu' and
        ansible_architecture == 'x86_64'
      block:
        - name: Get architecture
          command: dpkg --print-architecture
          register: deb_architecture
          changed_when: false
        - name: Install key
          shell:
            cmd: curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /etc/apt/keyrings/1password.gpg
            creates: /etc/apt/keyrings/1password.gpg
            warn: false
        - name: Add repository
          ansible.builtin.apt_repository:
            filename: 1password
            repo: deb [arch={{ deb_architecture.stdout }} signed-by=/etc/apt/keyrings/1password.gpg] https://downloads.1password.com/linux/debian/{{ deb_architecture.stdout }} stable main
        - name: Apt update
          ansible.builtin.command: apt update
          changed_when: false
        - name: Install 1password-cli
          package:
            name:
              - 1password-cli

    - name: Test for raspberry pi /proc/cpuinfo
      command: grep -E "Raspberry Pi|BCM2708|BCM2709|BCM2835|BCM2836" /proc/cpuinfo
      register: grep_cpuinfo_raspberrypi
      failed_when: false
      changed_when: false

    - name: Test for raspberry pi /proc/device-tree/model
      command: grep -E "Raspberry Pi" /proc/device-tree/model
      register: grep_device_tree_model_raspberrypi
      failed_when: false
      changed_when: false

    - name: Set raspberry_pi fact to true
      set_fact:
        raspberry_pi: true
      when: grep_cpuinfo_raspberrypi.rc == 0 or grep_device_tree_model_raspberrypi.rc == 0

    - name: check for poe hat
      block:
        - name: checking for cooling device
          stat:
            path: /sys/class/thermal/cooling_device0/type
          register: stat_result
        - name: gathering facts about cooling device
          when: stat_result.stat.exists
          slurp:
            src: /sys/class/thermal/cooling_device0/type
          register: cooling_device
      ignore_errors: true

    - name: install fan rules for poe hat
      when: cooling_device.skipped is not defined and
        cooling_device.content | b64decode | trim == 'rpi-poe-fan'
        and ansible_facts['distribution'] == 'Ubuntu'
        and ansible_facts['distribution_major_version'] == '20'
      block:
        - name: copy udev rule file
          copy:
            src: "50-rpi-fan.rules"
            dest: "/etc/udev/rules.d/50-rpi-fan.rules"
            mode: "u=rw,go=r"
          register: result
        - name: reload udev rules
          when: result is changed
          shell:
            cmd: "udevadm control --reload-rules && udevadm trigger"

    - name: Enable cgroup via boot commandline if not already enabled for Ubuntu on a Raspberry Pi
      when: ansible_facts['distribution'] == 'Ubuntu' and raspberry_pi | default(false)
      lineinfile:
        path: /boot/firmware/cmdline.txt
        backrefs: yes
        regexp: '^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).*)$'
        line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
      notify: reboot

    - name: Watchdog
      when: raspberry_pi is defined and raspberry_pi
      block:
        - name: Enable watchdog
          lineinfile:
            path: /etc/systemd/system.conf
            line: "{{ item }}"
          loop:
            - RuntimeWatchdogSec=10
            - ShutdownWatchdogSec=2min
          notify: reboot
        - name: install watchdog package
          package:
            name: watchdog
            state: present
        - name: Watch eth0
          lineinfile:
            path: /etc/watchdog.conf
            line: "{{ item }}"
          loop:
            - interface = eth0
            - retry-timeout = 0
          notify: watchdog  

    - name: setup rsyslog
      copy:
        src: "05-graylog.conf"
        dest: "/etc/rsyslog.d/05-graylog.conf"
        mode: "u=rw,go=r"
      notify: rsyslog

    - name: setup nut
      when: nut_server is defined and
        nut_server
      block:
        - name: nut package
          package:
            name: nut
            state: present
        - name: netserver mode
          ansible.builtin.lineinfile:
            path: /etc/nut/nut.conf
            line: MODE=netserver
            state: present
            regexp: "^MODE="
        - name: setup ups
          ansible.builtin.blockinfile:
            path: /etc/nut/ups.conf
            block: |
              [ups]
                driver = usbhid-ups
                port = auto
                desc = "Server UPS"
        - name: setup users
          ansible.builtin.blockinfile:
            path: /etc/nut/upsd.users
            block: |
              [monuser]
                password = secret
                upsmon slave

              [mainuser]
                password = secret2
                upsmon master
        - name: setup upsmon.conf
          ansible.builtin.lineinfile:
            path: /etc/nut/upsmon.conf
            line: MONITOR ups@localhost 1 mainuser secret2 master
            state: present
        - name: setup upsd.conf
          ansible.builtin.blockinfile:
            path: /etc/nut/upsd.conf
            block: |
              LISTEN 127.0.0.1
              LISTEN 0.0.0.0
        - name: copy udev rule
          ansible.builtin.copy:
            src: /lib/udev/rules.d/62-nut-usbups.rules
            dest: /etc/udev/rules.d
            remote_src: true
          register: result
        - name: reload udev rules
          when: result is changed
          shell:
            cmd: "udevadm control --reload-rules && udevadm trigger"
        - name: enable nut-server
          systemd:
            name: nut-server
            state: started
            enabled: true
        - name: enable nut-monitor
          systemd:
            name: nut-monitor
            state: started
            enabled: true
    
    - name: install packages
      when: packages is defined
      package:
        name: "{{ packages }}"
    - name: install snaps
      when: snaps is defined
      community.general.snap:
        name: "{{ snaps }}"
    - name: install classic snaps
      when: classic_snaps is defined
      community.general.snap:
        name: "{{ item }}"
        classic: true
      loop: "{{ classic_snaps }}"
    - name: Setup netplan
      when: netplan_enabled is defined and netplan_enabled
      become: true
      import_role:
        name: mrlesmithjr.netplan

  handlers:
    - name: reboot
      reboot:
    - name: rsyslog
      service:
        name: rsyslog
        state: restarted
    - name: watchdog
      service:
        name: watchdog
        state: restarted
